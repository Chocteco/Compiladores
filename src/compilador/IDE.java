/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package compilador;

import com.formdev.flatlaf.FlatIntelliJLaf;
import compilerTools.Directory;
import compilerTools.ErrorLSSL;
import compilerTools.Functions;
import compilerTools.Grammar;
import compilerTools.Production;
import compilerTools.TextColor;
import compilerTools.Token;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author kevin
 */
public class IDE extends javax.swing.JFrame {
    String COMPILADOR ="C:/Users/kevin/OneDrive/Documentos/NetBeansProjects/BD/compilador/JLexCompiler/dist/JLexCompiler.jar";
    //String COMPILADOR = "C:/Users/kevin/Downloads/Compilador-Tiny-master/JLexCompiler/dist/JLexCompiler.jar";
    ContadorLinea numerolinea;
    String ruta;
    private Directory dir;
    private String title = "Chocompiler";
    private ArrayList<Token> tokens;
    private ArrayList<ErrorLSSL> errors;
    private ArrayList<TextColor> textsColor;
    private Timer timerKeyReleased;
    private ArrayList<Production> identProd;
    private HashMap<String,String> identificadores;
    private boolean codeHasBeenCompiled = false;
    /**
     * Creates new form IDE
     */
    public IDE() {
        initComponents();
        inicializar();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        btnGuardar = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnCompilar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtpCode = new javax.swing.JTextPane();
        tabedPaneConsola = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputerrors = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        outputarbol = new javax.swing.JTextArea();
        tabedPane = new javax.swing.JScrollPane();
        Intermedio = new javax.swing.JTextArea();
        btnEjecutar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblTokens = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnGuardar.setBackground(new java.awt.Color(51, 255, 51));
        btnGuardar.setText("Guardar");
        btnGuardar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnAbrir.setBackground(new java.awt.Color(255, 204, 102));
        btnAbrir.setText("Abrir");
        btnAbrir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        btnNuevo.setBackground(new java.awt.Color(153, 255, 255));
        btnNuevo.setText("Nuevo");
        btnNuevo.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnCompilar.setBackground(new java.awt.Color(204, 0, 0));
        btnCompilar.setText("Compilar");
        btnCompilar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });

        jtpCode.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jtpCode.setForeground(new java.awt.Color(255, 255, 255));
        jtpCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtpCodeKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jtpCode);

        outputerrors.setColumns(20);
        outputerrors.setRows(5);
        jScrollPane2.setViewportView(outputerrors);

        tabedPaneConsola.addTab("Errores", jScrollPane2);

        outputarbol.setColumns(20);
        outputarbol.setRows(5);
        jScrollPane3.setViewportView(outputarbol);

        tabedPaneConsola.addTab("Resultados Sintáctico", jScrollPane3);

        Intermedio.setColumns(20);
        Intermedio.setRows(5);
        tabedPane.setViewportView(Intermedio);

        tabedPaneConsola.addTab("Código Intermedio", tabedPane);

        btnEjecutar.setBackground(new java.awt.Color(204, 204, 204));
        btnEjecutar.setText("Ejecutar");
        btnEjecutar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });

        tblTokens.setBackground(new java.awt.Color(255, 255, 153));
        tblTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Componente Lexico", "Lexema", "[Linea,columna]"
            }
        ));
        jScrollPane4.setViewportView(tblTokens);

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Nuevo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Abrir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");
        jMenuBar1.add(jMenu2);

        jMenu4.setText("Formato");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(61, 61, 61)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tabedPaneConsola, javax.swing.GroupLayout.PREFERRED_SIZE, 1414, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(192, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCompilar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(35, 35, 35)
                .addComponent(tabedPaneConsola, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        ///dir.Nuevo(this);
        dir.New();
        clearAllComp();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
       // dir.Guardar(this);
       if(ruta==null){
            clearAllComp();
            Exportar();
            return ;
        }
        try {
            clearAllComp();
            if (new File(ruta) != null) {
                try (FileWriter guardado = new FileWriter(new File(ruta))) {
                    guardado.write(jtpCode.getText());
                    JOptionPane.showMessageDialog(rootPane, "Archivo actualizado");
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
       // dir.Abrir(this);
       JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(fileChooser);
         ruta = fileChooser.getSelectedFile().getAbsolutePath();                                        
            File f = new File(ruta);
       if(dir.Open()){
           colorAnalysis();
           clearAllComp();
       }
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void jtpCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtpCodeKeyReleased

    }//GEN-LAST:event_jtpCodeKeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
         outputerrors.setText("");
      //  dir.Nuevo(this);
        clearAllComp();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
       // dir.Abrir(this);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
       // dir.Guardar(this);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        btnCompilar.doClick();
        if(codeHasBeenCompiled){
            if(!errors.isEmpty()){
                JOptionPane.showMessageDialog(null,"No se puede ejecutar el codigo se encontraron errores");
                
            }else{
                
            }
        }
        try {
            //Exportar();
            String [] cmd = {
                "java",
                "-jar",
                "\""+COMPILADOR+"\"", 
                "\""+ruta.replace("\\", "/")+"\""}; //Comando para ejecutar Jar de Analizador Lexicografico
            System.out.println(cmd[0]+" "+cmd[1]+" "+cmd[2]+" "+cmd[3]);
            Process process = Runtime.getRuntime().exec(cmd);
            //printResults(process);
        } catch (IOException ioe) {
                System.out.println (ioe);
        }
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        if(getTitle().contains("*") || getTitle().equals(title)){
            if(dir.Save()){
                compile();
            }
        }else{
            compile();
        }
    }//GEN-LAST:event_btnCompilarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(new FlatIntelliJLaf());
                
            } catch (UnsupportedLookAndFeelException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
            new IDE().setVisible(true);
            
        });
    }
    public void clearAllComp(){
        Functions.clearDataInTable(tblTokens);
        outputerrors.setText("");
        tokens.clear();
        errors.clear();
        identProd.clear();
        identificadores.clear();
        codeHasBeenCompiled = false;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Intermedio;
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public javax.swing.JTextPane jtpCode;
    private javax.swing.JTextArea outputarbol;
    private javax.swing.JTextArea outputerrors;
    private javax.swing.JScrollPane tabedPane;
    private javax.swing.JTabbedPane tabedPaneConsola;
    private javax.swing.JTable tblTokens;
    // End of variables declaration//GEN-END:variables

    private void inicializar() {
        ruta = null;
        title = "Chocompiler";
        dir = new Directory(this,jtpCode,title,".choco");
        //Titulo Del Documento
        setLocationRelativeTo(null);
        setTitle(title);
        String[] options = new String[]{"Guardar y continuar","Descargar"};
        addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e){
                dir.Exit();
                System.exit(0);
            }
        });
        Functions.setLineNumberOnJTextComponent(jtpCode);
        timerKeyReleased = new Timer((int)(1000*0.3),(ActionEvent e) ->{
            timerKeyReleased.stop();
            int posicion = jtpCode.getCaretPosition();
            jtpCode.setText(jtpCode.getText().replaceAll("[\r]+", ""));
            jtpCode.setCaretPosition(posicion);
            colorAnalysis();
        });
        Functions.insertAsteriskInName(this, jtpCode,()->{
            timerKeyReleased.restart();
        });
        tokens = new ArrayList<>();
        errors = new ArrayList<>();
        textsColor = new ArrayList<>();
        identProd = new ArrayList<>();
        identificadores = new HashMap<>();
        Functions.setAutocompleterJTextComponent(new String[]{"color","numero","este",
        "oeste","sur","norte","pintar"}, jtpCode,()->{
            timerKeyReleased.restart();
        });
    }
    private void Exportar() {
        try {
            JFileChooser archivo = new JFileChooser(System.getProperty("user.dir"));
            archivo.showSaveDialog(this);
            if (archivo.getSelectedFile() != null) {
                try (FileWriter guardado = new FileWriter(archivo.getSelectedFile())) {
                    guardado.write(jtpCode.getText());
                    JOptionPane.showMessageDialog(rootPane, "El archivo fue guardado con éxito en la ruta establecida");
                    setTitle("Compilador R++ | "+archivo.getSelectedFile().getPath());
                    ruta = archivo.getSelectedFile().getPath();
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
    private void colorAnalysis(){
        /* Limpiar el arreglo de colores */
        textsColor.clear();
        /* Extraer rangos de colores */
        LexerColor lexer;
        try {
            File codigo = new File("color.encrypter");
            FileOutputStream output = new FileOutputStream(codigo);
            byte[] bytesText = jtpCode.getText().getBytes();
            output.write(bytesText);
            BufferedReader entrada = new BufferedReader(new InputStreamReader(new FileInputStream(codigo), "UTF8"));
            lexer = new LexerColor(entrada);
            while (true) {
                TextColor textColor = lexer.yylex();
                if (textColor == null) {
                    break;
                }
                textsColor.add(textColor);
            }
        } catch (FileNotFoundException ex) {
            System.out.println("El archivo no pudo ser encontrado... " + ex.getMessage());
        } catch (IOException ex) {
            System.out.println("Error al escribir en el archivo... " + ex.getMessage());
        }
        Functions.colorTextPane(textsColor, jtpCode, new Color(40, 40, 40));
    }
    private void compile(){
        clearAllComp();
        lexicalAnalysis();
        fillTableTokens();
        syntaticAnalysis();
        semanticAnalysis(ruta.replace("\\", "/"));
        codeintermedio(ruta.replace("\\", "/"));
        printConsole();
        codeHasBeenCompiled= true;
    }
    private void lexicalAnalysis(){
        Lexer lexer;
        try {
            File codigo  = new File("code.encrypter");
            FileOutputStream output = new FileOutputStream(codigo);
            byte[] bytesText = jtpCode.getText().getBytes();
            output.write(bytesText);
            BufferedReader entrada  = new BufferedReader(new InputStreamReader(new FileInputStream(codigo),"UTF-8"));
            lexer = new Lexer(entrada);
            while(true){
                Token token = lexer.yylex();
                if(token == null){
                    break;
                }
                tokens.add(token);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void fillTableTokens(){
         tokens.forEach(token ->{
             Object[] data = new Object[]{token.getLexicalComp(), token.getLexeme(),
                 "[" + token.getLine() + "," + token.getColumn() + "]"};
             Functions.addRowDataInTable(tblTokens, data);
         });
    }
    private void syntaticAnalysis(){
        Grammar gramatica = new Grammar(tokens,errors);
        /*Eliminación de errorer*/
        gramatica.delete(new String[]{"ERROR","ERROR_1","ERROR_2"},1);
        /*Agrupacion de valores*/
        gramatica.group("VALOR", "(NUMERO)",true,identProd);
        /* Declaración de variables */
 
        gramatica.group("ESTRUCTURA", "IF  | WHILE ");
        gramatica.group("SENTENCIA_","PALABRA_RESERVADA (IDENTIFICADOR COMA)+ IDENTIFICADOR");
        gramatica.group("SENTENCIA_","PALABRA_RESERVADA IDENTIFICADOR OP_ASIG VALOR");
        gramatica.group("SENTENCIA_","PALABRA_RESERVADA IDENTIFICADOR");
        gramatica.group("SENTENCIA_", "IDENTIFICADOR OP_ASIG (IDENTIFICADOR OP_ARIT | VALOR OP_ARIT)+ VALOR | IDENTIFICADOR OP_ASIG (VALOR OP_ARIT | IDENTIFICADOR OP_ARIT)+ IDENTIFICADOR");
        gramatica.group("SENTENCIA_", "IDENTIFICADOR OP_ASIG IDENTIFICADOR");
        gramatica.group("SENTENCIA_", "IDENTIFICADOR OP_ASIG VALOR PUNTO VALOR");
        gramatica.group("SENTENCIA_", "IDENTIFICADOR OP_ASIG VALOR");
        gramatica.group("SENTENCIA_", "IDENTIFICADOR OP_ASIG OP_LOGICO");
        gramatica.group("OPERACION","OP_ASIG OP_ASIG");
        gramatica.group("OPERACION", "OP_LOGICO OP_ASIG");
        gramatica.group("OPERACION", "OP_LOGICO");
        gramatica.group("WHILE_C", "ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION (IDENTIFICADOR|VALOR) SENTENCIA_ OPERACION (IDENTIFICADOR | VALOR)) PARENTESIS_C THEN LLAVE_A (SENTENCIA_ PUNTO_COMA)+ LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION (IDENTIFICADOR|VALOR) SENTENCIA_ OPERACION (IDENTIFICADOR | VALOR)) PARENTESIS_C LLAVE_A (SENTENCIA_ PUNTO_COMA)+ LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION (IDENTIFICADOR|VALOR) SENTENCIA_ OPERACION (IDENTIFICADOR | VALOR)) PARENTESIS_C THEN LLAVE_A (SENTENCIA_ PUNTO_COMA) LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION (IDENTIFICADOR|VALOR) SENTENCIA_ OPERACION (IDENTIFICADOR | VALOR)) PARENTESIS_C LLAVE_A SENTENCIA_ LLAVE_C");
        gramatica.group("WHILE_C","ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C THEN LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C THEN LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C THEN LLAVE_A LLAVE_C PALABRA_RESERVADA | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C THEN LLAVE_A LLAVE_C PALABRA_RESERVADA");
        gramatica.group("WHILE_C","ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C THEN LLAVE_A (SENTENCIA_ PUNTO_COMA)+ LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C THEN LLAVE_A (SENTENCIA_ PUNTO_COMA)+ LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C THEN LLAVE_A (SENTENCIA_ PUNTO_COMA)+ LLAVE_C PALABRA_RESERVADA | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C THEN LLAVE_A (SENTENCIA_ PUNTO_COMA)+ LLAVE_C PALABRA_RESERVADA");
        gramatica.group("WHILE_C", "ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C LLAVE_A (SENTENCIA_ PUNTO_COMA)+ LLAVE_C");
        gramatica.group("WHILE_C", "ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C LLAVE_A (SENTENCIA_ PUNTO_COMA)+  LLAVE_C ");
        gramatica.group("WHILE_C","PALABRA_RESERVADA LLAVE_A (SENTENCIA_ PUNTO_COMA)+ LLAVE_C PALABRA_RESERVADA");
        gramatica.group("WHILE_E", "PALABRA_RESERVADA LLAVE_A (WHILE_C)+ LLAVE_C UNTIL PARENTESIS_A (IDENTIFICADOR OPERACION PARENTESIS_A OPERACION PARENTESIS_C) PARENTESIS_C");
        gramatica.group("WHILE_E","ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C LLAVE_A (WHILE_C)+ LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C LLAVE_A (WHILE_C)+ LLAVE_C");
        gramatica.group("WHILE_I", "ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C LLAVE_A (WHILE_E)+ LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C LLAVE_A (WHILE_E)+ LLAVE_C ");
        gramatica.group("ERROR","ESTRUCTURA IDENTIFICADOR OPERACION IDENTIFICADOR PARENTESIS_C LLAVE_A LLAVE_C | ESTRUCTURA IDENTIFICADOR OPERACION VALOR PARENTESIS_C LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_C LLAVE_A LLAVE_C | ESTRUCTURA (IDENTIFICADOR | VALOR)+ PARENTESIS_C LLAVE_A LLAVE_C | ESTRUCTURA (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C THEN LLAVE_A LLAVE_C | ESTRUCTURA (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C THEN LLAVE_A LLAVE_C", true,
        7, " × Error sintáctico {}: falta el parentesis que abre en la sentencia [#, %]");
        gramatica.group("ERROR","ESTRUCTURA PARENTESIS_A IDENTIFICADOR OPERACION IDENTIFICADOR LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A IDENTIFICADOR OPERACION VALOR LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR | VALOR)+ LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR THEN LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR THEN LLAVE_A LLAVE_C", true,
        8, " × Error sintáctico {}: falta el parentesis que cierra en la sentencia [#, %]");
        gramatica.group("ERROR","ESTRUCTURA PARENTESIS_A PARENTESIS_C LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C THEN LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C THEN LLAVE_C", true,
                11, " × Error sintáctico {}: falta la llave que abre la sentencia [#, %]");
        gramatica.group("ERROR", "ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C THEN LLAVE_A PALABRA_RESERVADA LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C THEN LLAVE_A PALABRA_RESERVADA LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C LLAVE_A PALABRA_RESERVADA LLAVE_C | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C LLAVE_A PALABRA_RESERVADA LLAVE_C", true,
                21, " × Error sintáctico {}: no se puede usar fi hasta que se encuentra una llave que cierra [#, %]");
        gramatica.group("ERROR","ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C LLAVE_A | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C LLAVE_A | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION IDENTIFICADOR) PARENTESIS_C THEN LLAVE_A | ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OPERACION VALOR) PARENTESIS_C THEN LLAVE_A", true,
                12, " × Error sintáctico {}: falta la llave que cierra la sentencia [#, %]");
        gramatica.group("ERROR", "ESTRUCTURA PARENTESIS_A PARENTESIS_C LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A PARENTESIS_C LLAVE_A", true,
                13, " × Error sintáctico {}: faltan parametros dentro de los parentesis [#, %]");
        gramatica.group("ERROR", "ESTRUCTURA PARENTESIS_A (IDENTIFICADOR | VALOR | OP_ARIT  )+ PARENTESIS_C LLAVE_A LLAVE_C ", true,
                14, " × Error sintáctico {}: ingrese un formato valido dentro de los parentesis para la estructura [#, %]");
        gramatica.group("ERROR", "ESTRUCTURA PARENTESIS_A (IDENTIFICADOR OP_ASIG IDENTIFICADOR)PARENTESIS_C LLAVE_A LLAVE_C | ESTRUCTURA PARENTESIS_A (SENTENCIA_) PARENTESIS_C LLAVE_A LLAVE_C", true,
                15, " × Error sintáctico {}: no se puede hacer una asignacion dentra de una estructura ingresar un formato valido dentro de los parentesis [#, %] \n SUGERENCIA: Tal vez deberia intentar con ==");
        gramatica.group("ERROR", "ESTRUCTURA LLAVE_A | ESTRUCTURA LLAVE_C | ESTRUCTURA IDENTIFICADOR LLAVE_A LLAVE_C | ESTRUCTURA", true,
                16, " × Error sintáctico {}: Introduzca una estructura valida para la sentencia [#, %]");
        gramatica.group("ERROR", "THEN", true,
                17, " × Error sintáctico {}: then debe estar acompañado de un IF posterior a  ) y previo a { [#, %]");
        gramatica.group("ERROR", "IDENTIFICADOR (IDENTIFICADOR OP_ARIT | VALOR OP_ARIT)+ VALOR | IDENTIFICADOR (IDENTIFICADOR OP_ARIT | VALOR OP_ARIT  )+ IDENTIFICADOR", true,
                18, " × Error sintáctico {}: es necesario declarar un operador de asignación entre variables [#, %]");
        gramatica.group("ERROR", "IDENTIFICADOR OP_ASIG (IDENTIFICADOR  | VALOR )+ VALOR | IDENTIFICADOR OP_ASIG (IDENTIFICADOR | VALOR )+ IDENTIFICADOR", true,
                19, " × Error sintáctico {}: es necesario declarar un operador matematico entre variables posteriores a un = [#, %]");
        gramatica.group("ERROR", "IDENTIFICADOR OP_ASIG VALOR PUNTO PUNTO_COMA | IDENTIFICADOR OP_ASIG PUNTO VALOR", true,
                20, " × Error sintáctico {}: se requiere un valor previo o posterior a un punto[#, %]");
       /* gramatica.group("ERROR", "IDENTIFICADOR", true,
                21, " × Error sintáctico {}: no se puede usar una variable sin un operador de asignacion y/o aritmetico [#, %]");*/
        gramatica.group("ERROR", "IDENTIFICADOR OPERACION ", true,
                9, " × Error sintáctico {}: falta un valor u otra variable para completar sentencia [#, %]");
        gramatica.group("ERROR", "OPERACION IDENTIFICADOR | OPERACION VALOR", true,
                10, " × Error sintáctico {}: falta una variable para completar la sentencia [#, %]");
      
//gramatica.group("SENTENCIA","PALABRA_RESERVADA (IDENTIFICADOR COMA)+ IDENTIFICADOR");
        gramatica.group("ERROR", "PALABRA_RESERVADA OP_ASIG VALOR", true,
                1, " × Error sintáctico {}: falta el identificador en la declaración de variable [#, %]");
        gramatica.finalLineColumn();

        gramatica.group("ERRROR", "PALABRA_RESERVADA IDENTIFICADOR OP_ASIG", true,
                2, " × Error sintáctico {}: falta el valor en la declaración de variable [#, %]");

        gramatica.initialLineColumn();

        gramatica.group("ERROR", "PALABRA_RESERVADA IDENTIFICADOR VALOR", true,
                3, " × Error sintáctico {}: falta el operador de asignación en la declaración de variable [#, %]", 2);
         gramatica.group("ERROR", "IDENTIFICADOR OP_ASIG VALOR", true,
                4, " × Error sintáctico {}: falta el tipo de dato en la declaración de variable [#, %]");
        gramatica.group("PROGRAM_C", "PROGRAM LLAVE_A LLAVE_C");
        gramatica.group("SENTENCIA_PC", "SENTENCIA_ PUNTO_COMA");
        gramatica.group("SENTENCIAPC", "SENTENCIA PUNTO_COMA");
        gramatica.group("ERROR", "SENTENCIA_", true,
         5, " × Error sintáctico {}: falta un punto y coma [#, %]");
        gramatica.group("PROGRAM_C","PROGRAM LLAVE_A (SENTENCIA_PC)+ LLAVE_C");
        gramatica.group("PROGRAM_C","PROGRAM LLAVE_A (SENTENCIA_PC)+ WHILE_C LLAVE_C");
        gramatica.group("PROGRAM_C","PROGRAM LLAVE_A (SENTENCIA_PC)+ WHILE_E LLAVE_C");
        gramatica.group("PROGRAM_C","PROGRAM LLAVE_A WHILE_C LLAVE_C");
        gramatica.group("PROGRAM_C","PROGRAM LLAVE_A WHILE_E LLAVE_C");
        gramatica.group("PROGRAM_C","PROGRAM LLAVE_A (SENTENCIA_PC)+ WHILE_E PUNTO_COMA LLAVE_C");
        gramatica.group("ERROR", "PROGRAM LLAVE_A (SENTENCIA_PC)+ | PROGRAM LLAVE_A  | PROGRAM LLAVE_A WHILE_C",true,
         6, " × Error sintáctico {}: falta la llave que cierra el program[#, %]");
        gramatica.group("ERROR", "PROGRAM (SENTENCIA_PC)+ LLAVE_C | PROGRAM LLAVE_C | PROGRAM WHILE_C LLAVE_C | PROGRAM (SENTENCIA_PC)+ WHILE_C LLAVE_C", true,
         7, " × Error sintáctico {}: falta la llave que abre el program[#, %]");
        gramatica.group("ERROR", "PROGRAM", true,
                17, " × Error sintáctico {}: Introduzca una estructura valida para program [#, %]");
        gramatica.show();
    }

    public String semanticAnalysis(String rutaL) {
        Scanner entrada = null;
        try {
            if(!(new File(rutaL).exists())){
            String resultadoE = "Nada que compilar :( \n";
            //System.out.println(resultadoE);
            return null;
            }
            String[] rutaFile = rutaL.split("/");
            int ind = 0;
            if(rutaFile.length > 0)
                ind = rutaFile.length-1;
            //Cargando Errores
            String rutaSemantico = rutaL.replaceFirst(rutaFile[ind], "Semantico.txt");
            File fErrores = new File(rutaSemantico);
            entrada = new Scanner(fErrores);
            CargarTextoSemantico(entrada);
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (NullPointerException e) {
            //JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún fichero");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            if (entrada != null) {
                entrada.close();
            }
        }
        return null;
    }
    public String CargarTextoSemantico(Scanner entrada){
         outputarbol.setText(null);
        while (entrada.hasNext()) {
            String texto = entrada.nextLine();
            outputarbol.append(texto);
            //jTextAreaResultados.append(texto);
            outputarbol.append("\n");
            //jTextAreaResultados.append("\n");
        }
        return null;
    } 
    public String codeintermedio(String rutaL){
        Scanner entrada = null;
        try {
            if(!(new File(rutaL).exists())){
            String resultadoE = "Nada que compilar :( \n";
            //System.out.println(resultadoE);
            return null;
            }
            String[] rutaFile = rutaL.split("/");
            int ind = 0;
            if(rutaFile.length > 0)
                ind = rutaFile.length-1;
            //Cargando
            String rutaCodigoIntermedio = rutaL.replaceFirst(rutaFile[ind], "CodigoIntermedio.txt");
            File fCodigo = new File(rutaCodigoIntermedio);
            entrada = new Scanner(fCodigo);
            CargarTextoCodigoIntermedio(entrada);
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (NullPointerException e) {
            //JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún fichero");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            if (entrada != null) {
                entrada.close();
            }
        }
        return null;
    }
    public String CargarTextoCodigoIntermedio(Scanner entrada){
        Intermedio.setText(null);
        while (entrada.hasNext()) {
            String texto = entrada.nextLine();
            Intermedio.append(texto);
            //jTextAreaResultados.append(texto);
            Intermedio.append("\n");
            //jTextAreaResultados.append("\n");
        }
        return null;
    }
   private void printConsole(){
        int sizeErrors = errors.size();
        if(sizeErrors > 0){
            Functions.sortErrorsByLineAndColumn(errors);
            String strErrors = "\n";
            for(ErrorLSSL error: errors){
                String strError = String.valueOf(error);
                strErrors += strError + "\n";
            }
            outputerrors.setText("Compilacion Terminada..... \n" + strErrors + "\nLa compilacion termino con errores");
        }else{ 
            outputerrors.setText("Compilacion Terminada.....");
        }
    }
    private void printArbol(){
        int sizeErrors = errors.size();
        if(sizeErrors > 0){
            outputarbol.setText("Compilacion terminada con errores verificar en consola");
        }else{
             tokens.forEach(token ->{
             String data = token.getLexicalComp();
             String data2 = token.getLexeme();
             String data3 = token.toString();
             outputarbol.append("{"+ data2 + "}" + "-->" +"{"+data+"} \n" + data3);
            });
        }   
    }
}
